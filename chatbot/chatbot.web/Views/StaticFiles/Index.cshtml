@model StaticPageViewModel
@{
    ViewData["Title"] = "Static Files";
}
<script src="~/lib/form-json-editor/json-edit.js"></script>
<link href="~/lib/form-json-editor/json-edit.css" rel="stylesheet" />

<input id="EncodedFilePath" type="hidden" value="" />
<input id="deleteFileId" type="hidden" value="" />

<script type="text/javascript">
    var isStaticPageScrapingInProgress = "@Model.IsStaticFilesScrapingInProgress".toLowerCase() == "true" ? true : false;
    var fullScrapeCheckInterval;

    if (isStaticPageScrapingInProgress) {
        pollFullScrapeStatusCheck();
    }

    function pollFullScrapeStatusCheck() {
        fullScrapeCheckInterval = setInterval(checkIsStaticPageWebScrapingInProgress, 15000);
    }

    function checkIsStaticPageWebScrapingInProgress() {
        var request = $.ajax({
            url: "/StaticFiles/IsStaticPagesWebScrapingInProgress",
            type: "GET"
        });

        request.done(function (response) {
            isStaticPageScrapingInProgress = response;
            if (response == false) {
                iziToast.success({
                    title: 'Done!',
                    position: 'topRight',
                    message: 'Static Page Scraping has been completed!',
                });
                enableScraping();
                stopFullScrapeCheckInterval();
            }
        });

        request.fail(function (jqXHR, textStatus) {
            console.log('Error occured while checking Scraping Status');
            console.log(jqXHR);
            isStaticPageScrapingInProgress = true;
            stopFullScrapeCheckInterval();
        });
    }

    function stopFullScrapeCheckInterval() {
        clearInterval(fullScrapeCheckInterval);
    }

    function viewStaticFile(pageId) {
        window.open('/StaticFiles/GetStaticFileContent?staticFileId=' + pageId, '_blank');
    }

    function resetFileuploadForm() {
        $('#file').val("");
    }

    function uploadStaticFile() {
        if ($('#file').val() == "") {
            alert('Please choose the html file to upload.!');
        } else {
            var fd = new FormData();
            var files = $('#file')[0].files[0];
            fd.append('file', files);
            $.ajax({
                url: '/StaticFiles/FileUpload',
                type: 'post',
                data: fd,
                contentType: false,
                processData: false,
                success: function (response) {
                    location.reload();
                },
                error: function (error) {
                    alert(error.responseText);
                }
            });
        }
    }

    function setFileDeleteId(fileName, encodedFilePath) {
        $('#deleteFileId').val(fileName);
        $('#EncodedFilePath').val(encodedFilePath);
    }

    function deleteStaticFile() {
        var fileId = $('#deleteFileId').val();

        var request = $.ajax({
            url: "/StaticFiles/DeleteStaticFileById?id=" + fileId,
            type: "GET"
        });

        request.done(function (response) {
            window.location.reload();
        });

        request.fail(function (jqXHR, textStatus) {
        });
    }

    function getPageConfigById() {
        resetConfiguration();
        var fileId = $('#deleteFileId').val();
        setTimeout(function () {
            var request = $.ajax({
                url: "/StaticFiles/GetPageConfigById?id=" + fileId,
                type: "GET"
            });

            request.done(function (res) {
                var staticPageInfo = res;
                var pageUrl = res.pageUrl.replace(/\\/g, "/");
                var config = {};
                if (staticPageInfo.pageConfig != "") {
                    config = JSON.parse(staticPageInfo.pageConfig)[pageUrl];
                    je.setValue(config);
                } else {
                    resetConfiguration();
                }
            });

            request.fail(function (jqXHR, textStatus) {
            });

        }, 300);
    }

    function updatePageConfig(id) {

        var fileId = $('#deleteFileId').val();
        var pageConfig = je.getValue();

        var urlPath = $('#EncodedFilePath').val();

        var obj = {};
        obj[urlPath] = pageConfig;
        var stringifiedPageConfig = JSON.stringify(obj);

        var request = $.ajax({
            url: "/StaticFiles/UpdatePageConfigById?id=" + fileId + "&pageConfig=" + stringifiedPageConfig,
            type: "GET"
        });

        request.done(function (response) {
            window.location.reload();
        });

        request.fail(function (jqXHR, textStatus) {
        });
    }

    var jsonEditorSchema = {
        "title": "json schema sample",
        "type": "object",
        "properties": {
            "page_hierarchy": {
                "type": "object",
                "properties": {
                    "domain": {
                        "type": "string"
                    },
                    "class": {
                        "type": "string"
                    }
                }
            },
            "subtitle_pattern": {
                "title": "subtitle_pattern",
                "type": "string"
            },
            "html": {
                "type": "object",
                "properties": {
                    "main_title": {
                        "type": "object",
                        "properties": {
                            "tag": {
                                "type": "string"
                            }, "class": {
                                "type": "string"
                            }
                        }
                    },
                    "main_content": {
                        "type": "object",
                        "properties": {
                            "tag": {
                                "type": "string"
                            }, "class": {
                                "type": "string"
                            }
                        }
                    },
                }
            }
        },
        "required": ["subtitle_pattern"]
    };

    var jsonEditorValues = {
        "subtitle_pattern": "",
        "page_hierarchy": {
            "domain": "",
            "class": ""
        }
    };

    function resetConfiguration() {
        config = {
            "subtitle_pattern": "",
            "page_hierarchy": {
                "domain": "",
                "class": ""
            }
        }
        je.setValue(config);
    }

    var je;

    var enableJsonEditor = function (jsonEditorId) {
        je = $("#" + jsonEditorId).jsonEdit({
            "treeExpandCollapseButton": "true",
            "schema": jsonEditorSchema,
            "value": jsonEditorValues,
            "afterValueChanged": function (newValue, newSchema) {
                $("#jsonValue").html(JSON.stringify(newValue, null, 2));
                setValidity();
            },
            "afterWidgetCreated": function (newValue, newSchema) {
                $("#jsonValue").html(JSON.stringify(newValue, null, 2));
                setValidity();
            }
        });
    }

    var launchedModals = [];

    var launchModal = function (id) {
        var jsonEditorId = "jsonEditor_" + id;
        var className = "toggle-modal-setupPageConfigModel" + "_" + id;
        var modelExists = launchedModals.find(a => a.id == jsonEditorId);
        if (!modelExists) {
            launchedModals.push({ id: jsonEditorId });

            $('.' + className).fireModal({
                title: 'Page Configuration',
                body: '<div id="' + jsonEditorId + '"></div>',
                appended: enableJsonEditor.bind(null, jsonEditorId),
                buttons: [
                    {
                        text: 'Update',
                        class: 'btn btn-outline-primary',
                        handler: updatePageConfig.bind(null, jsonEditorId)
                    },
                    {
                        text: 'Close',
                        class: 'btn btn-secondary',
                        handler: function (current_modal) {
                            $.destroyModal(current_modal);
                        }
                    }
                ]
            });
        } else {
            enableJsonEditor(jsonEditorId);
        }
    }

    $(document).ready(function () {

        if (isStaticPageScrapingInProgress)
            disableScraping();
        else
            enableScraping();

        $('#toggle-modal-uploadStaticFileModal').fireModal({
            title: 'Upload Static File',
            body: '<div class="input-group">' +
                '<div class= "input-group-prepend">' +
                '<span class="input-group-text" id="inputGroupFileAddon01">Upload</span>' +
                '</div>' +
                '<div class="custom-file">' +
                '<input type="file" class="custom-file-input" id="file" accept=".html"' +
                'aria-describedby="inputGroupFileAddon01">' +
                '<label class="custom-file-label" for="file">Choose a html file</label>' +
                '</div>' +
                '</div>',
            buttons: [
                {
                    text: 'Upload',
                    class: 'btn btn-outline-primary',
                    handler: uploadStaticFile
                },
                {
                    text: 'Close',
                    class: 'btn btn-secondary',
                    handler: function (current_modal) {
                        $.destroyModal(current_modal);
                    }
                }
            ]
        });

        $('.toggle-modal-deleteStaticFileModal').fireModal({
            title: 'Delete Static File',
            body: 'Are you sure you want to delete this static file.?',
            buttons: [
                {
                    text: 'Delete',
                    class: 'btn btn-outline-primary',
                    handler: deleteStaticFile
                },
                {
                    text: 'Close',
                    class: 'btn btn-secondary',
                    handler: function (current_modal) {
                        $.destroyModal(current_modal);
                    }
                }
            ]
        });


        var rescrapePageBody = '<div class="alert alert-warning">' +
            '<b>Note! </b> Re-scrape static page using this feature is recommended only if your page content is changed with the same structure.' +
            '</br> Rescrape of the static page will be happening in the background. Once it is completed, Status will be updated in the <b>Static Files</b> page.</div > ';

        $('.toggle-modal-addAllWebPageModal').fireModal({
            title: 'Request for Static Page Rescrape',
            body: rescrapePageBody + '<b>Are you sure you want to rescrape all the Static Pages?</b>',
            buttons: [
                {
                    text: 'Rescrape',
                    class: 'btn btn-outline-warning',
                    handler: rescrapeAllStaticPages
                },
                {
                    text: 'Cancel',
                    class: 'btn btn-outline-secondary',
                    handler: function (current_modal) {
                        $.destroyModal(current_modal);
                    }
                }
            ]
        });
    });


    function rescrapeAllStaticPages(current_modal) {
        $.destroyModal(current_modal);

        disableScraping();

        var request = $.ajax({
            url: "/StaticFiles/RescrapeAllStaticPages",
            type: "POST"
        });

        request.done(function (response) {
            pollFullScrapeStatusCheck();
            iziToast.success({
                title: 'Done!',
                position: 'topRight',
                message: 'Static Page Scrape Request is queued successfully!',
            });
        });

        request.fail(function (jqXHR, textStatus) {
            enableScraping();
            iziToast.error({
                title: 'Error!',
                position: 'topRight',
                message: jqXHR.responseText,
            });
        });
    }

    function setValidity() {
        if (je) $("#jsonValidity").html(JSON.stringify(je.isValid()));
    }


    function enableScraping() {
        $("#RescrapeAllPagesBtn").show();
        $("#WebScrapeInProgressDiv").hide();
        $("#StaticfilesPageDiv").show();
        $("#UploadNewStaticPageDiv").show();
    }

    function disableScraping() {
        $("#RescrapeAllPagesBtn").hide();
        $("#WebScrapeInProgressDiv").show();
        $("#StaticfilesPageDiv").hide();
        $("#UploadNewStaticPageDiv").hide();
    }

</script>


<div class="section-header">
    <div class="col-lg-4 col-md-6 col-sm-6 col-12">
        <h1>Static Files</h1>
    </div>
    <div class="col-lg-2 col-md-6 col-sm-6 col-12"></div>
    <div class="col-lg-2 col-md-6 col-sm-6 col-12"></div>

    <div class="col-lg-2 col-md-6 col-sm-6 col-12">
        <button id="RescrapeAllPagesBtn" class="btn btn-icon icon-left btn-outline-warning toggle-modal-addAllWebPageModal"><i class="fas fa-sync-alt"></i> Rescrape All Static Pages</button>
        @*<a id="RescrapeAllPagesBtn" href="" class="btn btn-icon icon-left btn-outline-warning toggle-modal-addAllWebPageModal"><i class="fas fa-sync-alt"></i>Rescrape All Static Pages</a>*@
    </div>

    <div style="display:none" id="UploadNewStaticPageDiv" class="col-lg-2 col-md-6 col-sm-6 col-12">
        <button onclick="resetFileuploadForm();" style="float:right;" id="toggle-modal-uploadStaticFileModal" class="btn btn-icon icon-left btn-outline-primary"><i class="fas fa-file-upload"></i> Upload File</button>
    </div>
</div>

<div class="section-body">
    <div class="row">
        <div class="col-12 col-md-12 col-lg-12">
            <div style="display:none" id="WeScrapeWarningDiv">
            </div>
            <div class="card" style="display:none" id="WebScrapeInProgressDiv">
                <div class="card-body">
                    <div class="alert alert-warning alert-has-icon">
                        <div class="alert-icon"><i class="fas fa-exclamation-triangle"></i></div>
                        <div class="alert-body">
                            <div class="alert-title">Web Scraping is in progress.</div>
                            Please wait for the operation to complete.
                        </div>
                    </div>
                </div>
            </div>
            <div class="card" style="display:none" id="StaticfilesPageDiv">
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-striped table-md">
                            <thead>
                                <tr>
                                    <th style="text-align:right" width="8%">
                                        S No.
                                    </th>
                                    <th>
                                        File
                                    </th>
                                    <th>
                                        Created On
                                    </th>
                                    <th>
                                        Status
                                    </th>
                                    <th>
                                        Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var index = 0;
                                }
                                @foreach (var item in Model.StaticPages)
                                {
                                    {
                                        var className = "toggle-modal-setupPageConfigModel_" + item.Id.ToString();
                                        index += 1;

                                        <tr>
                                            <td style="text-align:right">@index</td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.FileName)
                                            </td>
                                            <td>
                                                @{
                                                    var createdDate = item.CreatedOn.ToString("dd-MMM-yyyy");
                                                }
                                                @createdDate
                                            </td>
                                            <td>
                                                @{
                                                    var status = item.GetEnumDescription();
                                                    var statusClass = "badge-warning";
                                                    switch (item.ScrapeStatus)
                                                    {
                                                        case ScrapeStatus.YetToScrape:
                                                            statusClass = "badge-warning";
                                                            break;
                                                        case ScrapeStatus.ScrapeSuccess:
                                                            statusClass = "badge-success";
                                                            break;
                                                        case ScrapeStatus.ScrapeFailed:
                                                            statusClass = "badge-danger";
                                                            break;
                                                        default:
                                                            break;
                                                    }

                                                }
                                                <div class="badge @statusClass">@status</div>

                                            </td>
                                            <td width="25%">
                                                <button onclick="setFileDeleteId('@item.Id', '@item.PageUrl'); launchModal('@item.Id'); getPageConfigById();" class="btn btn-sm btn-outline-primary @className">Page Config</button>
                                                <button onclick='viewStaticFile("@item.Id")' class="btn btn-sm btn-outline-primary">View</button>
                                                <button onclick="setFileDeleteId('@item.Id')" class="btn btn-sm btn-outline-danger toggle-modal-deleteStaticFileModal">Delete</button>
                                            </td>
                                        </tr>
                                    }
                                }

                                @if (Model.StaticPages.Count == 0)
                                {
                                    <tr class="no-data" style="text-align:center">
                                        <td colspan="5">No data found !</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
