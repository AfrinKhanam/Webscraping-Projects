@model WebPageViewModel
@{
    ViewData["Title"] = "Index";
}

<div class="section-header">
    <div class="col-lg-4 col-md-6 col-sm-6 col-12">
        <h1>Web Scrape Config</h1>
    </div>
    <div class="col-lg-2 col-md-6 col-sm-6 col-12"></div>
    <div class="col-lg-2 col-md-6 col-sm-6 col-12"></div>

    <div class="col-lg-2 col-md-6 col-sm-6 col-12">
        <a id="RescrapeAllPagesBtn" href="" class="btn btn-icon icon-left btn-outline-warning toggle-modal-addAllWebPageModal"><i class="fas fa-sync-alt"></i> Rescrape All Web Pages</a>
    </div>

    <div style="display:none" id="AddNewWebPageBtn" class="col-lg-2 col-md-6 col-sm-6 col-12">
        <a href="@Url.Action("addnew", "webpage")" style="float:right;" class="btn btn-icon icon-left btn-outline-primary"><i class="fas fa-plus"></i>Add new web page</a>
    </div>

</div>

<div class="section-body">
    <div class="row">
        <div class="col-12 col-md-12 col-lg-12">
            <div style="display:none" id="WeScrapeWarningDiv">
            </div>

            <div class="card" style="display:none" id="WebScrapeInProgressDiv">
                <div class="card-body">
                    <div class="alert alert-warning alert-has-icon">
                        <div class="alert-icon"><i class="fas fa-exclamation-triangle"></i></div>
                        <div class="alert-body">
                            <div class="alert-title">Web Scraping is in progress.</div>
                            Please wait for the operation to complete.
                        </div>
                    </div>
                </div>
            </div>
            <div class="card" style="display:none" id="WebScrapeConfigDiv">
                <div class="card-header">
                    <h4>Pages</h4>
                    <div class="card-stats">
                        <div class="card-stats-items">
                            <div class="card-stats-item">
                                <div class="card-stats-item-label">Total Pages</div>
                                <div class="card-stats-item-count">@Model.WebScapeConfigs.Count()</div>
                            </div>

                            <div class="card-stats-item">
                                <div class="card-stats-item-label">Inactive Pages</div>
                                <div class="card-stats-item-count">@Model.WebScapeConfigs.Count(a => a.IsActive == false)</div>
                            </div>

                            <div class="card-stats-item">
                                <div class="card-stats-item-label">Pending Requests</div>
                                <div class="card-stats-item-count">@Model.WebScapeConfigs.Count(a => a.ScrapeStatus == ScrapeStatus.YetToScrape && a.IsActive)</div>
                            </div>

                            <div class="card-stats-item">
                                <div class="card-stats-item-label">Successful Requests</div>
                                <div class="card-stats-item-count">@Model.WebScapeConfigs.Count(a => a.ScrapeStatus == ScrapeStatus.ScrapeSuccess && a.IsActive)</div>
                            </div>

                            <div class="card-stats-item">
                                <div class="card-stats-item-label">Failed Requests</div>
                                <div class="card-stats-item-count">@Model.WebScapeConfigs.Count(a => a.ScrapeStatus == ScrapeStatus.ScrapeFailed && a.IsActive)</div>
                            </div>

                        </div>
                    </div>
                </div>

                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-striped table-md">
                            <tbody>
                                <tr>
                                    <th width="8%" style="text-align:right">
                                        S No.
                                    </th>
                                    <th width="23%">
                                        Page Name
                                    </th>
                                    <th width="30%">
                                        Url
                                    </th>
                                    <th width="13%">
                                        Last Scraped
                                    </th>
                                    <th width="2%">
                                        Scraping Status
                                    </th>
                                    <th width="15%">
                                        Error Message
                                    </th>
                                    <th width="1%">
                                        Active
                                    </th>
                                    <th width="8%">
                                        Actions
                                    </th>
                                </tr>
                                @{
                                    var index = 0;
                                }
                                @foreach (var item in Model.WebScapeConfigs)
                                {
                                    {
                                        index += 1;
                                    }
                                    <tr>
                                        <td style="text-align:right">@index</td>
                                        <td style="font-size:small">

                                            @{
                                                var isLengthyPageName = false;
                                                var pageName = item.PageName;
                                                var shortPageName = pageName;

                                                if (!string.IsNullOrEmpty(pageName))
                                                {
                                                    if (pageName.Length > 65)
                                                    {
                                                        isLengthyPageName = true;
                                                        shortPageName = pageName.Substring(0, 58) + "...";
                                                    }
                                                }
                                            }

                                            @shortPageName
                                            @if (isLengthyPageName)
                                            {
                                                <a href="javascript:;" data-toggle="popover" title="" data-content="@item.PageName" data-trigger="focus" data-original-title="Page Name">read more</a>
                                            }

                                        </td>
                                        <td style="font-size:small">
                                            @{
                                                string reducedText = item.Url;
                                                string[] prefixArray = { "https://www.indianbank.in/", "https://indianbank.in/" };
                                                foreach (var prefix in prefixArray)
                                                {
                                                    reducedText = reducedText.Replace(prefix, "");
                                                }
                                            }
                                            <a target="_blank" href="@item.Url">@reducedText</a>
                                        </td>

                                        <td style="font-size:smaller">
                                            @{
                                                var lastScrapedOn = item.LastScrapedOn.HasValue ? item.LastScrapedOn.Value.ToString("dd-MMM-yyyy") : "N/A";
                                            }
                                            @lastScrapedOn
                                        </td>
                                        <td>
                                            @{
                                                var status = item.GetEnumDescription();
                                                var statusClass = "badge-warning";
                                                switch (item.ScrapeStatus)
                                                {
                                                    case ScrapeStatus.YetToScrape:
                                                        statusClass = "badge-warning";
                                                        break;
                                                    case ScrapeStatus.ScrapeSuccess:
                                                        statusClass = "badge-success";
                                                        break;
                                                    case ScrapeStatus.ScrapeFailed:
                                                        statusClass = "badge-danger";
                                                        break;
                                                    default:
                                                        break;
                                                }

                                            }
                                            <div class="badge @statusClass">@status</div>
                                        </td>
                                        <td style="font-size:smaller">
                                            @{
                                                var isLengthyText = false;
                                                var error = item.ErrorMessage;
                                                var shortErrorMessage = error;

                                                if (!string.IsNullOrEmpty(error))
                                                {
                                                    if (error.Length > 50)
                                                    {
                                                        isLengthyText = true;
                                                        shortErrorMessage = error.Substring(0, 35) + "...";
                                                    }
                                                }
                                            }

                                            @shortErrorMessage
                                            @if (isLengthyText)
                                            {
                                                <a href="javascript:;" data-toggle="popover" title="" data-content="@item.ErrorMessage" data-trigger="focus" data-original-title="Error Message">read more</a>
                                            }
                                        </td>
                                        <td style="font-size:smaller">
                                            @{
                                                string isActive = (item.IsActive) ? "Yes" : "No";
                                            }
                                            @isActive
                                        </td>
                                        <td>
                                            <div class="dropdown d-inline">
                                                <button class="btn btn-sm btn-outline-primary dropdown-toggle" type="button" id="dropdownMenuButton2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    Page Actions
                                                </button>
                                                <div class="dropdown-menu" x-placement="bottom-start" style="position: absolute; transform: translate3d(0px, 28px, 0px); top: 0px; left: 0px; will-change: transform;">
                                                    <a class="dropdown-item has-icon" href="@Url.Action("Edit", "WebPage", new { pageId=item.Id})"><i class="far fa-edit"></i> Edit</a>
                                                    <a onclick="setcurrentWebPageId('@item.Id')" class="dropdown-item has-icon toggle-modal-deleteWebPageModal" href="#"><i class="far fa-times-circle"></i> Delete</a>
                                                    <a onclick="setcurrentWebPageId('@item.Id')" class="dropdown-item has-icon toggle-modal-reScrapePageRequest" href="#"><i class="fas fa-sync-alt"></i> Rescrape</a>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                                @if (Model.WebScapeConfigs.Count == 0)
                                {
                                    <tr class="no-data" style="text-align:center">
                                        <td colspan="7">No data found !</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<input id="currentWebPageId" type="hidden" value="" />

<script type="text/javascript">
    var isFullWebScrapingInProgress = "@Model.IsFullWebScrapingInProgress".toLowerCase() == "true" ? true : false;
    var fullScrapeCheckInterval;

    if (isFullWebScrapingInProgress) {
        pollFullScrapeStatusCheck();
    }

    function pollFullScrapeStatusCheck() {
        fullScrapeCheckInterval = setInterval(checkIsFullWebScrapingInProgress, 15000);
    }

    function checkIsFullWebScrapingInProgress() {
        var request = $.ajax({
            url: "/WebPage/GetFullScrapingStatus",
            type: "GET"
        });

        request.done(function (response) {
            isFullWebScrapingInProgress = response;
            if (response == false) {
                iziToast.success({
                    title: 'Done!',
                    position: 'topRight',
                    message: 'Web Page Scraping has been completed!',
                });
                enableScraping();
                stopFullScrapeCheckInterval();
            }
        });

        request.fail(function (jqXHR, textStatus) {
            console.log('Error occured while checking Scraping Status');
            console.log(jqXHR);
            isFullWebScrapingInProgress = true;
            stopFullScrapeCheckInterval();
        });
    }

    function stopFullScrapeCheckInterval() {
        clearInterval(fullScrapeCheckInterval);
    }

    $(document).ready(function () {

        if (isFullWebScrapingInProgress)
            disableScraping();
         else
            enableScraping();

        $('.toggle-modal-deleteWebPageModal').fireModal({
            title: 'Delete Web Page',
            body: 'Are you sure you want to delete this Web Page?',
            buttons: [
                {
                    text: 'Delete',
                    class: 'btn btn-outline-danger',
                    handler: deleteWebPage
                },
                {
                    text: 'No',
                    class: 'btn btn-outline-secondary',
                    handler: function (current_modal) {
                        $.destroyModal(current_modal);
                    }
                }
            ]
        });

        var body = '<div class="alert alert-warning">' +
            '<b>Note! </b> Re-scrape web page using this feature is recommended only if your page content is changed with the same structure.' +
            '</br> Rescrape of the web page will be happening in the background. Once it is completed, Status will be updated in the <b>Web scrape config</b> page.</div > ';

        $('.toggle-modal-addAllWebPageModal').fireModal({
            title: 'Request for Web Page Rescrape',
            body: body + '<b>Are you sure you want to rescrape all the Web Pages?</b>',
            buttons: [
                {
                    text: 'Rescrape',
                    class: 'btn btn-outline-warning',
                    handler: rescrapeAllWebPages
                },
                {
                    text: 'Cancel',
                    class: 'btn btn-outline-secondary',
                    handler: function (current_modal) {
                        $.destroyModal(current_modal);
                    }
                }
            ]
        });

        var rescrapePageBody = '<div class="alert alert-warning">' +
            '<b>Note! </b> Re-scrape web page using this feature is recommended only if your page content is changed with the same structure.' +
            '</br> Rescrape of the web page will be happening in the background. Once it is completed, Status will be updated in the <b>Web scrape config</b> page.</div > ';

        $('.toggle-modal-reScrapePageRequest').fireModal({
            title: 'Request for Web Page Rescrape',
            body: rescrapePageBody + '<b>Are you sure you want to rescrape this Web Page?</b>',
            buttons: [
                {
                    text: 'Rescrape',
                    class: 'btn btn-outline-warning',
                    handler: rescrapeWebPage
                },
                {
                    text: 'Cancel',
                    class: 'btn btn-outline-secondary',
                    handler: function (current_modal) {
                        $.destroyModal(current_modal);
                    }
                }
            ]
        });
    });

    var synonymDetails = {};
    var wordDetails = {};

    function setcurrentWebPageId(id) {
        $('#currentWebPageId').val(id);
    }

    function deleteWebPage() {
        var id = $('#currentWebPageId').val();

        var request = $.ajax({
            url: "/WebPage/DeleteById?pageId=" + id,
            type: "DELETE"
        });

        request.done(function (response) {
            iziToast.success({
                title: 'Done!',
                position: 'topRight',
                message: 'Web page deleted successfully.',
            });
            setTimeout(function () { window.location.reload(); }, 1000);
        });

        request.fail(function (jqXHR, textStatus) {
            request.fail(function (jqXHR, textStatus) {
                iziToast.error({
                    title: 'Error!',
                    position: 'topRight',
                    message: 'Failed to delete Web Page.',
                });
            });
        });
    }

    function enableScraping()
    {
        $("#RescrapeAllPagesBtn").show();
        $("#WebScrapeInProgressDiv").hide();
        $("#WebScrapeConfigDiv").show();
        $("#AddNewWebPageBtn").show();
    }

    function disableScraping()
    {
        $("#RescrapeAllPagesBtn").hide();
        $("#WebScrapeInProgressDiv").show();
        $("#WebScrapeConfigDiv").hide();
        $("#AddNewWebPageBtn").hide();
    }

    function rescrapeAllWebPages(current_modal) {
        $.destroyModal(current_modal);

        disableScraping();

        var request = $.ajax({
            url: "/WebPage/RescrapeAllPages",
            type: "POST"
        });

        request.done(function (response) {
            pollFullScrapeStatusCheck();
            iziToast.success({
                title: 'Done!',
                position: 'topRight',
                message: 'Web Page Scrape Request is queued successfully!',
            });
        });

        request.fail(function (jqXHR, textStatus) {
            enableScraping();
            iziToast.error({
                title: 'Error!',
                position: 'topRight',
                message: jqXHR.responseText,
            });
        });
    }

    function rescrapeWebPage(current_modal) {
        var warningHtml = '<div class="alert alert-warning alert-dismissible show fade"> <div class="alert-body">' + '<button class="close" data-dismiss="alert">' +
            '<span>×</span></button>' + 'Rescrape of the web page will be happening in the background. Please wait for couple of minutes to complete.!</div></div>';

        $("#WeScrapeWarningDiv").empty().append(warningHtml).show();

        var webPageId = $('#currentWebPageId').val();
        $.destroyModal(current_modal);

        var request = $.ajax({
            url: "/WebPage/RescrapePage?pageId=" + webPageId,
            type: "POST"
        });

        request.done(function (response) {
            pollFullScrapeStatusCheck();
            iziToast.success({
                title: 'Done!',
                position: 'topRight',
                message: 'Web Page Scrape Request is queued successfully!',
            });
        });

        request.fail(function (jqXHR, textStatus) {
            iziToast.error({
                title: 'Error!',
                position: 'topRight',
                message: jqXHR.responseText,
            });
        });
    }
</script>
