@model LeadGenerationReportViewModel

@{
    ViewData["Title"] = "Lead Generation Report";
}

<script type="text/javascript">
    var chatHistory = [];

    function toggleExpand(e) {
        var element = $('#' + e);
        if (element.hasClass("fa-plus-square")) {
            element.removeClass("fa-plus-square").addClass("fa-minus-square");
        } else {
            element.removeClass("fa-minus-square").addClass("fa-plus-square");
        };
    }

    function onCollapseHandler(e) {
        var id = this.id + "-icon"
        var element = $('#' + id);
        if (element.hasClass("fa-plus-square")) {} else {
            element.removeClass("fa-minus-square").addClass("fa-plus-square");
        };
    }

    function onExpandHandler() {
        var id = this.id + "-icon"
        var element = $('#' + id);
        if (element.hasClass("fa-minus-square")) {} else {
            element.removeClass("fa-plus-square").addClass("fa-minus-square");
        };
    }

    function renderChatHistory(chatLog) {
        var chats = [];
        chatLog.data.forEach(function(log, index) {
            if (log.userQuery) {
                chats.push({
                    text: log.userQuery,
                    position: 'right',
                    time: log.userTimeStamp
                });
            }
            if (log.botResponse) {
                chats.push({
                    text: log.botResponse,
                    position: 'left',
                    time: log.botTimeStamp
                });
            }
        });

        setTimeout(function() {
            for (var i = 0; i < chats.length; i++) {
                var type = 'text';
                if (chats[i].typing != undefined) type = 'typing';
                $.chatCtrl('#' + 'chatbox-' + chatLog.id, {
                    text: (chats[i].text != undefined ? chats[i].text : ''),
                    picture: (chats[i].position == 'left' ? '/botAvatar.png' : '/lib/stisla/img/avatar-1.png'),
                    position: 'chat-' + chats[i].position,
                    type: type,
                    time: chats[i].time
                });
            }

            if ($(".chat-content").length) {
                $(".chat-content").niceScroll({
                    cursoropacitymin: .3,
                    cursoropacitymax: .8,
                });
                $('.chat-content').getNiceScroll(0).doScrollTop($('.chat-content').height());

                $(".chat-text").each(function(index, element) {
                    $(element).css('white-space', 'pre');
                });
            }
        }, 100);
    }

    function openChatHistoryModal(e, userName, visitedOn) {
        var elementId = e.id;
        var classList = $(e).attr('class').split(' ').filter(cls => cls.startsWith("trigger--fire-modal"));

        if (classList.length != 2) {
            var id = "chatbox-" + elementId;
            var body = '<div class="col-12 col-sm-6 col-lg-12">' +
                '<div class="card chat-box" id="' + id + '">' +
                '<div class="card-header">' +
                '<div class="article-category"><a style="font-weight: bold; color: #6777ef;">Chat with ' + userName + '</a> <div class="bullet"></div> <a style="color: #6777ef;">' + visitedOn + '</a></div>' +
                '</div>' +
                '<div class="card-body chat-content">' +
                '</div>' +
                '</div>' +
                '</div>';

            $("#" + elementId).fireModal({
                size: "modal-lg",
                title: "Chat Log",
                body: body
            });

            var chatLog = chatHistory.find(chat => chat.id == elementId);

            renderChatHistory(chatLog);
        }

        setTimeout(function() {
            if ($(".chat-content").length) {
                $(".chat-content").each(function(index, element) {
                    console.log(element);
                    $(element).niceScroll({
                        cursoropacitymin: .3,
                        cursoropacitymax: .8,
                    });
                    $(element).getNiceScroll(0).doScrollTop($(element).height());
                    $(element).css('overflow', 'scroll').css('overflow', 'hidden');
                });
            }
        }, 500);
    }

    function updateLeadGenerationAction(ele, id) {
        var chatLog = chatHistory.find(chat => chat.id == id);
        var selectedActionId = ele.value == 0 ? null : Number(ele.value);

        $.ajax({
            url: "/report/UpdateLeadGenerationAction",
            type: "POST",
            data: {
                id: chatLog.leadGenerationInfo.id,
                LeadGenerationActionId: selectedActionId
            },
            success: function(html) {
                iziToast.success({
                    title: 'Done!',
                    position: 'topRight',
                    message: 'Action updated successfully.',
                });
            },
            error: function(err) {
                iziToast.error({
                    title: 'Error!',
                    position: 'topRight',
                    message: 'Failed to update the Action.',
                });
            }
        });
    }

    $(function() {
        var from_date = '@Model.From';
        var to_date = '@Model.To';

        $("#datepicker_from").datepicker({
            autoclose: true,
            todayHighlight: true
        }).datepicker('update', formatDate(from_date, "dd-mm-yyyy"));

        $("#datepicker_to").datepicker({
            autoclose: true,
            todayHighlight: true
        }).datepicker('update', formatDate(to_date, "dd-mm-yyyy"));

        $("#from_date_input").change(function () {
            from_date = formatDate(this.value, "dd-mm-yyyy");
            var startDate = convertToDateObject(this.value);
            $('#datepicker_to').datepicker('setStartDate', startDate);
        });

        $("#to_date_input").change(function () {
            to_date = formatDate(this.value, "dd-mm-yyyy");
            var toDate = convertToDateObject(this.value);
            $('#datepicker_from').datepicker('setEndDate', toDate);
        });

        $('#filter_btn').click(function () {
            var fdate = formatDate(from_date, "yyyy-mm-dd");
            var tdate = formatDate(to_date, "yyyy-mm-dd");

            $("#from").val(fdate);
            $("#to").val(tdate);

            $("#submit_btn").click();
        });

        $('#export_btn').click(function() {
            $(".from").val(formatDate(from_date, "yyyy-mm-dd"));
            $(".to").val(formatDate(to_date, "yyyy-mm-dd"));
            $("#export_btn_submit").click();
        });

        $("[id$=LeadGeneration-collapse]").on('hidden.bs.collapse', onCollapseHandler);
        $("[id$=LeadGeneration-collapse]").on('shown.bs.collapse', onExpandHandler);
    });
</script>

<div class="section-header">
    <div class="col-lg-4 col-md-6 col-sm-6 col-12">
        <h1>Lead Generation Report</h1>
    </div>
    <div class="col-lg-6 col-md-6 col-sm-6 col-12">
        <form class="form-inline" role="form" action="/report/LeadGenerationReport" method="post">
            <input type="hidden" id="from" name="from" value="" />
            <input type="hidden" id="to" name="to" value="" />
            <div class="form-group">
                <label for="From">From</label>   &nbsp;
                <div id="datepicker_from" class="input-group date" data-date-format="dd-mm-yyyy" data-date-end-date="0d">
                    <input class="form-control" type="text" id="from_date_input" autocomplete="off" />
                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                </div>
            </div>
            &nbsp;
            &nbsp;
            <div class="form-group">
                <label for="To">To</label>   &nbsp;
                <div id="datepicker_to" class="input-group date" data-date-format="dd-mm-yyyy" data-date-end-date="0d">
                    <input class="form-control" type="text" id="to_date_input" autocomplete="off" />
                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                </div>
            </div>
            <button type="submit" style="display:none" id="submit_btn" class="btn btn-primary">Submit</button>
        </form>
    </div>
    <div class="col-lg-2 col-md-6 col-sm-6 col-12">
        <button type="button" id="filter_btn" class="btn btn-primary">Filter</button> &nbsp; &nbsp;
        <button class="btn btn-outline-success" type="button" id="export_btn">Export</button>

        <form class="form-inline" role="form" action="/report/ExportLeadGenerationReport" method="post">
            <input class="from" name="from" type="hidden" value="">
            <input class="to" name="to" type="hidden" value="">
            <button id="export_btn_submit" style="display:none" type="submit">Export Report</button>
        </form>
    </div>
</div>

<div class="section-body">
    <div class="row">
        <div class="col-12 col-md-12 col-lg-12">
            <div class="card">
                <div class="card-header">
                    <h4>Report</h4>
                    <div class="card-stats">
                        <div class="card-stats-items">
                            @{
                                var fromDate = Model.From;
                                var toDate = Model.To;
                            }
                            <div class="card-stats-item">
                                <div class="card-stats-item-label">From</div>
                                <div class="card-stats-item-count">
                                    @fromDate
                                </div>
                            </div>
                            <div class="card-stats-item">
                                <div class="card-stats-item-label">To</div>
                                <div class="card-stats-item-count">
                                    @toDate
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">

                    @{
                        var headerIndex = 0;
                        var headerId = "";
                        var data_targetWithHash = "";
                        var data_targetWithOutHash = "";
                        var id = "";
                        var iconId = "";
                    }

                    <div id="accordion">
                        @foreach (var item in Model.ConversationsByIntent)
                        {
                            {
                                var uniqueNumber = Guid.NewGuid().ToString();
                                headerIndex = headerIndex + 1;
                                headerId = "heading" + uniqueNumber;
                                data_targetWithOutHash = "collapse-" + uniqueNumber + "LeadGeneration-collapse";
                                data_targetWithHash = "#" + data_targetWithOutHash;
                                id = "collapse" + uniqueNumber;
                                iconId = data_targetWithOutHash + "-icon";
                            }
                            <div class="accordion">
                                <div style="cursor: pointer;" class="accordion-header collapsed" onclick="toggleExpand('@iconId');" role="button" data-toggle="collapse" data-target="@data_targetWithHash" aria-expanded="false">
                                    <h4>@item.Intent (@item.ConversationByUsers.Sum(i => i.TurnConversations.Count)) <i id="@iconId" title="click to expand" class="fa fa-plus-square float-right" aria-hidden="true"></i></h4>
                                </div>
                                <div class="accordion-body collapse" id="@data_targetWithOutHash" data-parent="#accordion" style="">
                                    <div class="table-responsive">
                                        <table class="table table-sm table-hover">
                                            <thead>
                                                <tr>
                                                    <th scope="col">#</th>
                                                    <th scope="col">Visitor Name</th>
                                                    <th scope="col">Visitor Phone Number</th>
                                                    <th scope="col">Number of queries</th>
                                                    <th scope="col">Visited On</th>
                                                    <th scope="col">Action</th>
                                                    <th scope="col"></th>
                                                </tr>
                                            </thead>

                                            @{
                                                int index = 0;
                                                int ChatLogs = 0;
                                                var visitedOn = "";
                                                var uniqueNumber_Chat = "";

                                            }
                                            <tbody>
                                                @foreach (var user in item.ConversationByUsers)
                                                {
                                                    {
                                                        uniqueNumber_Chat = Guid.NewGuid().ToString();
                                                        index = index + 1;
                                                        visitedOn = user.TimeStamp.ToString("ddd, dd MMM yyy HH:mm:ss");
                                                        ChatLogs = user.TurnConversations.Count();
                                                    }
                                                    <tr>
                                                        <td>@index</td>
                                                        <td>@Html.DisplayFor(modelItem => user.Name)</td>
                                                        <td>@Html.DisplayFor(modelItem => user.PhoneNumber)</td>
                                                        <td>@ChatLogs</td>
                                                        <td>@visitedOn</td>
                                                        <td>
                                                            <select onchange="updateLeadGenerationAction(this, '@uniqueNumber_Chat')" class="form-control form-control-sm">
                                                                <option value="0">Select Action</option>
                                                                @if (Model.LeadGenerationActions.Count == 0)
                                                                {
                                                                    <p>Please define actions</p>
                                                                }

                                                                @foreach (var action in Model.LeadGenerationActions)
                                                                {
                                                                    if (user.LeadGenerationInfo != null)
                                                                    {
                                                                        if (user.LeadGenerationInfo.LeadGenerationActionId == action.Id)
                                                                        {
                                                                            <option value="@action.Id" selected>@action.Name</option>
                                                                        }
                                                                        else
                                                                        {
                                                                            <option value="@action.Id">@action.Name</option>
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        <option value="@action.Id">@action.Name</option>
                                                                    }
                                                                }
                                                            </select>
                                                        </td>
                                                        <td>
                                                            <script type="text/javascript">
                                                                var chatLog = {};
                                                                chatLog.id = '@uniqueNumber_Chat';
                                                                chatLog.data = @Json.Serialize(user.TurnConversations);
                                                                chatLog.leadGenerationInfo = @Json.Serialize(user.LeadGenerationInfo);
                                                                chatHistory.push(chatLog);
                                                            </script>

                                                            <button id="@uniqueNumber_Chat" onclick="openChatHistoryModal(this, '@user.Name', '@visitedOn')" class="btn btn-primary trigger--fire-modal-@uniqueNumber_Chat">View Chat</button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
