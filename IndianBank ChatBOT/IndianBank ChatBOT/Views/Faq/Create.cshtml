@model Faq

@{
    ViewData["Title"] = "Add New FAQ";
    //string insertFAQStatus = TempData["InsertFAQStatus"] as string;
    string insertFAQStatus = ViewBag.InsertFAQStatus as string;

    if (string.IsNullOrEmpty(insertFAQStatus))
    {
        insertFAQStatus = string.Empty;
    }
}

<h4>Add New FAQ</h4>
@if (!string.IsNullOrEmpty(insertFAQStatus))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <strong>Success.</strong> @insertFAQStatus
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<hr />

<div class="alert alert-info">
    <strong>Note:</strong> Always make sure that you <strong>Train</strong> and <strong>Deploy</strong> the FAQ BOT after adding new FAQ.
</div>

<div class="row">
    <div class="col-md-4">
        @using (Html.BeginForm("Create", "Faq", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)

            <div class="form-group">
                @Html.LabelFor(a => a.Question, new { @class = "control-label" })
                @Html.TextBoxFor(a => a.Question, new { @class = "form-control" })
                @Html.ValidationMessageFor(a => a.Question, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(a => a.Answer, new { @class = "control-label" })
                @Html.TextAreaFor(a => a.Answer, new { @class = "form-control" })
                @Html.ValidationMessageFor(a => a.Answer, "", new { @class = "text-danger" })
            </div>
            <input class="btn btn-primary" type="submit" value="Create" />
        }
    </div>
</div>
<div>
    <a asp-action="Display">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
